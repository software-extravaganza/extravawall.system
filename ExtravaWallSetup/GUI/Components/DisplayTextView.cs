
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.22.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace ExtravaWallSetup.GUI {
    using CliWrap;
    using ExtravaWallSetup.GUI.Framework;
    using NStack;
    using System.Linq.Expressions;
    using Terminal.Gui;

    public class ExtravaProgressBar : ProgressBar {
        public override bool OnMouseEnter(MouseEvent mouseEvent) {
            Application.UngrabMouse();
            this.SuperView.OnMouseEnter(mouseEvent);
            return false;
        }

        public override bool OnMouseLeave(MouseEvent mouseEvent) {
            Application.UngrabMouse();
            this.SuperView.OnMouseLeave(mouseEvent);
            return false;
        }

        public override bool OnMouseEvent(MouseEvent mouseEvent) {
            Application.UngrabMouse();
            SuperView.OnMouseEvent(mouseEvent);
            return false;
        }
    }

    public class ExtravaTextView : TextView {

        public bool CanSelect { get; set; } = false;
        public override bool OnMouseEnter(MouseEvent mouseEvent) {
            if (!CanSelect) {
                Application.UngrabMouse();
                this.SuperView.OnMouseEnter(mouseEvent);
            }

            return CanSelect;
        }

        public override bool OnMouseLeave(MouseEvent mouseEvent) {
            if (!CanSelect) {
                Application.UngrabMouse();
                this.SuperView.OnMouseLeave(mouseEvent);
            }

            return CanSelect;
        }

        public override bool OnMouseEvent(MouseEvent mouseEvent) {
            if (!CanSelect) {
                Application.UngrabMouse();
                SuperView.OnMouseEvent(mouseEvent);
            }

            return CanSelect;
        }
    }
    public class ExtravaLabel : View {
        public ExtravaLabel() {

        }

        public override bool OnMouseEnter(MouseEvent mouseEvent) {
            Application.UngrabMouse();
            SuperView?.OnMouseEnter(mouseEvent);
            return false;
        }

        public override bool OnMouseLeave(MouseEvent mouseEvent) {
            Application.UngrabMouse();
            SuperView?.OnMouseLeave(mouseEvent);
            return false;
        }

        public override bool OnMouseEvent(MouseEvent mouseEvent) {
            Application.UngrabMouse();
            SuperView?.OnMouseEvent(mouseEvent);
            return false;
        }
    }

    public partial class DisplayTextView : ITextOutput {
        int currentWidth = 0, currentHeight = 0;
        public DisplayTextView(Terminal.Gui.Color foreground = Terminal.Gui.Color.Green, Terminal.Gui.Color background = Terminal.Gui.Color.Black, string text = "") {
            setup(text, foreground, background);
        }
        public DisplayTextView(string text, Terminal.Gui.Color foreground = Terminal.Gui.Color.Green, Terminal.Gui.Color background = Terminal.Gui.Color.Black) {
            setup(text, foreground, background);
        }

        private void setup(string text, Color foreground, Color background) {
            InitializeComponent();
            var scheme = new Terminal.Gui.Attribute(foreground, background);
            textOutput.ColorScheme.Normal = scheme;
            textOutput.Text = string.Empty;
            if (!string.IsNullOrEmpty(text)) {
                WriteLine(text);
            }
        }

        public void WriteLine(ustring output = null) {
            output = output ?? string.Empty;
            printOut(output, true);
        }

        public void Write(ustring output) {
            printOut(output, false);
        }

        private void printOut(ustring output, bool newLine) {
            textOutput.Text = textOutput.Text + ((newLine ? Environment.NewLine : string.Empty) + output).Replace("\r\n", "\n").Replace("\t", "    ");//.Replace(" ", "\u00A0");
            var countOfLines = 0;
            textOutput.GetCurrentWidth(out currentWidth);
            foreach (var line in textOutput.Text.ToString().Split('\n')) {
                countOfLines += 1;
                currentWidth = currentWidth > line.Length ? currentWidth : line.Length;
            }

            currentHeight = countOfLines;
            Width = currentWidth;
            textOutput.Width = currentWidth;
            Height = currentHeight;
            textOutput.Height = currentHeight;
            textOutput.SetNeedsDisplay();
            InstallManager.Instance.Console.RefreshConsole(this, new Size(currentWidth, currentHeight));
        }
    }
}
